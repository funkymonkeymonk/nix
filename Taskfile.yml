version: "3"

tasks:
  default:
    aliases:
      - list
      - l
    desc: List all tasks if none is specified
    cmd: task --list-all

  build-osx:
    desc: Perform osx build
    aliases:
      - osx
    platforms: [darwin]
    cmd: sudo darwin-rebuild switch --flake ./
  build-linux:
    desc: Perform linux based build
    aliases:
      - linux
    platforms: [linux]
    cmd: sudo nixos-rebuild switch --flake ./
  switch:
    desc: Runs the appropriate switch command for the platform
    aliases:
      - s
    cmds:
      - cmd: task build-osx
        platforms: [darwin]
      - cmd: task build-linux
        platforms: [linux]
  test:
    desc: Run flake check
    aliases:
      - t
    cmds:
      - echo "🔍 building flake configurations..."
      - nix flake check
      - echo "✅ All configurations (NixOS and Darwin) validated successfully"

  build:
    desc: build all configurations
    aliases:
      - b
    cmds:
      - echo "🔍 building flake configurations..."
      - task: build:darwin
      - task: build:nixos
      - echo "✅ All configurations (NixOS and Darwin) validated successfully"

  build:darwin:
    desc: build all Darwin (macOS) configurations
    cmds:
      - echo "🍎 building Darwin configurations..."
      - task: build:darwin:will-stride-mbp
      - task: build:darwin:megamanx
      - echo "✅ All Darwin configurations validated successfully"

  build:nixos:
    desc: build all NixOS configurations
    cmds:
      - echo "🐧 building NixOS configurations..."
      - task: build:nixos:drlight
      - task: build:nixos:zero
      - echo "✅ All NixOS configurations validated successfully"

  build:darwin:will-stride-mbp:
    desc: Build Will-Stride-MBP Darwin configuration
    cmd: nix build .#darwinConfigurations."Will-Stride-MBP".config.system.build.toplevel

  build:darwin:megamanx:
    desc: build MegamanX Darwin configuration
    cmd: nix build .#darwinConfigurations."MegamanX".config.system.build.toplevel

  build:nixos:drlight:
    desc: build drlight NixOS configuration
    cmd: nix build .#nixosConfigurations."drlight".config.system.build.toplevel

  build:nixos:zero:
    desc: build zero NixOS configuration
    cmd: nix build .#nixosConfigurations."zero".config.system.build.toplevel

  fmt:
    desc: Run formatter on all nix files.
    aliases:
      - f
    cmds:
      - alejandra *.nix

  lint:
    desc: Run linters on all nix files.
    aliases:
      - l
    cmds:
      - echo "🔍 Running deadnix (dead code finder)..."
      - devenv shell -- deadnix .

  quality:
    desc: Run all code quality checks (format + lint).
    aliases:
      - q
    cmds:
      - task: fmt
      - task: lint

  dev:
    desc: Enter development shell with all tools available.
    aliases:
      - d
    cmd: devenv shell

  devenv:update:
    desc: Update devenv lock file.
    cmd: devenv update

  secrets-get:
    desc: "Get secrets file using 1Password CLI"
    cmds:
      - echo "🔐 Retrieving secrets from 1Password..."
      - op read "op://personal/nix-secrets/secrets.nix" > secrets.nix
      - echo "✅ Secrets retrieved and saved to secrets.nix"

  secrets-set:
    desc: "Set secrets file using 1Password CLI"
    cmds:
      - echo "🔐 Storing secrets to 1Password..."
      - op document create secrets.nix --vault personal --title "Nix Secrets" --tags nix,secrets
      - echo "✅ Secrets stored in 1Password"

  1password:setup:
    desc: "Set up 1Password CLI authentication"
    cmds:
      - echo "🔐 Setting up 1Password CLI..."
      - echo "Please sign in to 1Password CLI:"
      - op signin
      - echo "✅ 1Password CLI authenticated"

  1password:status:
    desc: "Check 1Password CLI authentication status"
    cmds:
      - echo "🔐 Checking 1Password CLI status..."
      - op account list
      - echo "✅ 1Password CLI is authenticated"

  secrets:init:
    desc: "Initialize secrets management with 1Password"
    cmds:
      - echo "🔐 Initializing secrets management..."
      - echo "1. Copy secrets.nix.template to secrets.nix"
      - echo "2. Fill in your secrets in secrets.nix"
      - echo "3. Run 'task secrets-set' to store in 1Password"
      - echo "4. Run 'task secrets-get' to retrieve from 1Password"
      - 'echo "5. Enable secrets in your configuration: myConfig.secrets.enable = true"'
      - cp secrets.nix.template secrets.nix
      - echo "✅ Template copied to secrets.nix - edit it with your secrets"

  secrets:populate:
    desc: "Automatically populate secrets.nix from 1Password items"
    cmds:
      - echo "🔐 Populating secrets from 1Password..."
      - |
        # Read secrets from 1Password with fallbacks
        GIT_USERNAME=$(op read "op://personal/git/username" 2>/dev/null || echo "Your Name")
        GIT_EMAIL=$(op read "op://personal/git/email" 2>/dev/null || echo "your.email@example.com")
        GITHUB_TOKEN=$(op read "op://personal/github/token" 2>/dev/null || echo "")
        OPENAI_KEY=$(op read "op://personal/openai/api-key" 2>/dev/null || echo "")
        ANTHROPIC_KEY=$(op read "op://personal/anthropic/api-key" 2>/dev/null || echo "")
        HUGGINGFACE_TOKEN=$(op read "op://personal/huggingface/token" 2>/dev/null || echo "")
        AWS_ACCESS_KEY=$(op read "op://personal/aws/access-key-id" 2>/dev/null || echo "")
        AWS_SECRET_KEY=$(op read "op://personal/aws/secret-access-key" 2>/dev/null || echo "")
        AWS_REGION=$(op read "op://personal/aws/region" 2>/dev/null || echo "us-east-1")
        DO_TOKEN=$(op read "op://personal/digitalocean/token" 2>/dev/null || echo "")
        HOME_ADDRESS=$(op read "op://personal/address/home" 2>/dev/null || echo "")
        PHONE_PRIMARY=$(op read "op://personal/phone/primary" 2>/dev/null || echo "")
        PHONE_WORK=$(op read "op://personal/phone/work" 2>/dev/null || echo "")
        BIRTHDAY=$(op read "op://personal/birthday" 2>/dev/null || echo "")

        # Generate secrets.nix file
        cat > secrets.nix << EOF
        # Auto-generated secrets from 1Password
        # Generated on $(date)
        {
          # Git configuration
          git = {
            userName = "$GIT_USERNAME";
            userEmail = "$GIT_EMAIL";
            githubToken = "$GITHUB_TOKEN";
          };

          # SSH keys (optional)
          ssh = {
            privateKey = "";
            publicKey = "";
          };

          # API keys and tokens
          apiKeys = {
            openai = "$OPENAI_KEY";
            anthropic = "$ANTHROPIC_KEY";
            huggingface = "$HUGGINGFACE_TOKEN";
          };

          # Database credentials
          databases = {};

          # Cloud service credentials
          cloud = {
            aws = {
              accessKeyId = "$AWS_ACCESS_KEY";
              secretAccessKey = "$AWS_SECRET_KEY";
              region = "$AWS_REGION";
            };
            digitalocean = {
              token = "$DO_TOKEN";
            };
          };

          # Personal/private configuration
          personal = {
            homeAddress = "$HOME_ADDRESS";
            phoneNumbers = {
              primary = "$PHONE_PRIMARY";
              work = "$PHONE_WORK";
            };
            birthday = "$BIRTHDAY";
          };
        }
        EOF
      - echo "✅ Secrets populated from 1Password (missing values left empty)"

  init:
    desc: Initial setup commands
    cmds:
      - sudo nix run nix-darwin/master#darwin-rebuild -- switch --flake ./

  git:set-remote-ssh:
    desc: Switch
    cmds:
      - git remote -v
      - git remote set-url origin git@github.com:funkymonkeymonk/nix.git
      - git remote -v

  git:set-remote-https:
    desc: Switch
    cmds:
      - git remote -v
      - git remote set-url origin https://github.com/funkymonkeymonk/nix.git
      - git remote -v
# TODO: Add gh auth workflow
# TODO: Add a 1Password setup flow
# TODO: Add a git setup flow
