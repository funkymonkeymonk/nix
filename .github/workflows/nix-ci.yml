name: Nix CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Matrix build for different architectures
  test-matrix:
    name: Test (${{ matrix.system }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - system: x86_64-linux
            runner: ubuntu-latest
            test-target: build:nixos
          - system: aarch64-darwin
            runner: macos-latest
            test-target: build:darwin
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v10
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            sandbox = false

      - name: Setup Nix cache
        uses: DeterminateSystems/nix-cache-action@v1

      - name: Install Task
        run: nix profile install nixpkgs#go-task

      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: ${{ runner.os }}-nix-store-${{ hashFiles('**/flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-store-

      - name: Run formatter
        run: task fmt

      - name: Run configuration tests
        run: task test

      - name: Build system configurations
        run: task ${{ matrix.test-target }}

      - name: Upload build artifacts
        if: matrix.system == 'x86_64-linux'
        uses: actions/upload-artifact@v4
        with:
          name: nixos-configurations-${{ github.sha }}
          path: |
            result
          retention-days: 7

  # macOS-specific testing
  macos-integration:
    name: macOS Integration Tests
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v10
        with:
          extra-conf: |
            experimental-features = nix-command flakes
            sandbox = false

      - name: Setup Nix cache
        uses: DeterminateSystems/nix-cache-action@v1

      - name: Install Task
        run: nix profile install nixpkgs#go-task

      - name: Cache Nix store
        uses: actions/cache@v4
        with:
          path: |
            /nix/store
            ~/.cache/nix
          key: macos-nix-store-${{ hashFiles('**/flake.lock') }}
          restore-keys: |
            macos-nix-store-

      - name: Test individual Darwin configurations
        run: |
          task build:darwin:will-stride-mbp
          task build:darwin:megamanx

      - name: Test macOS-specific features
        run: |
          echo "Testing macOS-specific configurations..."
          # Test that aerospace configuration builds
          nix build .#darwinConfigurations."Will-Stride-MBP".config.services.aerospace.package
          # Test that homebrew casks are valid
          nix build .#darwinConfigurations."Will-Stride-MBP".config.homebrew.casks
